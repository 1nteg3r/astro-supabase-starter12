---
import { getEntry } from "astro:content";
import TableRow from "../components/TableRow.astro";
import Guide from "../components/Guide.astro";
import Alert from "../components/Alert.astro";
import Layout from "../components/Layout.astro";
import { supabase } from "../utils/database";

export const prerender = false;

let frameworks;
let guide;
let alert;

// Fetch frameworks data from Supabase if connection is set up
if (supabase) {
  const { data: fetchedData, error } = await supabase
    .from("frameworks")
    .select("*")
    .order("likes", { ascending: false });
  frameworks = fetchedData && fetchedData.length ? fetchedData : null;
  alert = error;
}

// Get guides content
const connectGuide = await getEntry("guides", "guide-connect-supabase");
const fetchDataGuide = await getEntry("guides", "guide-fetch-data");
if (!supabase) {
  // Show guide if not connected to Supabase and no data is fetched
  guide = connectGuide;
} else if (!frameworks) {
  // Show only the fetch data guide if connected but no data is available
  guide = fetchDataGuide;
}
---

<Layout title="Web Frameworks">
  {
    frameworks ? (
      // Render data from the database if available
      <>
        <h1 class="mb-8 text-4xl font-bold">
          Vote for Your Favorite Web Framework
        </h1>
        <table class="w-full text-left">
          <thead>
            <tr class="font-mono text-base border-t border-b">
              <th>Name</th>
              <th>Logo</th>
              <th>Likes</th>
            </tr>
          </thead>
          <tbody>
            {frameworks?.map((framework) => (
              <TableRow framework={framework} />
            ))}
          </tbody>
        </table>
      </>
    ) : (
      <>
        {
          // Display error message if available
          alert && <Alert code={alert.code} text={alert.message} />
        }
        {
          // Render appropriate guide(s) based on connection status
          guide && <Guide guide={guide} />
        }
      </>
    )
  }
</Layout>
